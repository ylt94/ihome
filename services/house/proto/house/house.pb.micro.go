// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/house/house.proto

package go_micro_service_house

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for House service

func NewHouseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for House service

type HouseService interface {
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...client.CallOption) (*UploadImageResponse, error)
	Detail(ctx context.Context, in *DetailRequest, opts ...client.CallOption) (*DetailResponse, error)
	DataByHouseIds(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error)
}

type houseService struct {
	c    client.Client
	name string
}

func NewHouseService(name string, c client.Client) HouseService {
	return &houseService{
		c:    c,
		name: name,
	}
}

func (c *houseService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "House.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "House.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...client.CallOption) (*UploadImageResponse, error) {
	req := c.c.NewRequest(c.name, "House.UploadImage", in)
	out := new(UploadImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) Detail(ctx context.Context, in *DetailRequest, opts ...client.CallOption) (*DetailResponse, error) {
	req := c.c.NewRequest(c.name, "House.Detail", in)
	out := new(DetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseService) DataByHouseIds(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "House.DataByHouseIds", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for House service

type HouseHandler interface {
	List(context.Context, *ListRequest, *ListResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	UploadImage(context.Context, *UploadImageRequest, *UploadImageResponse) error
	Detail(context.Context, *DetailRequest, *DetailResponse) error
	DataByHouseIds(context.Context, *DataRequest, *DataResponse) error
}

func RegisterHouseHandler(s server.Server, hdlr HouseHandler, opts ...server.HandlerOption) error {
	type house interface {
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		UploadImage(ctx context.Context, in *UploadImageRequest, out *UploadImageResponse) error
		Detail(ctx context.Context, in *DetailRequest, out *DetailResponse) error
		DataByHouseIds(ctx context.Context, in *DataRequest, out *DataResponse) error
	}
	type House struct {
		house
	}
	h := &houseHandler{hdlr}
	return s.Handle(s.NewHandler(&House{h}, opts...))
}

type houseHandler struct {
	HouseHandler
}

func (h *houseHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.HouseHandler.List(ctx, in, out)
}

func (h *houseHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.HouseHandler.Create(ctx, in, out)
}

func (h *houseHandler) UploadImage(ctx context.Context, in *UploadImageRequest, out *UploadImageResponse) error {
	return h.HouseHandler.UploadImage(ctx, in, out)
}

func (h *houseHandler) Detail(ctx context.Context, in *DetailRequest, out *DetailResponse) error {
	return h.HouseHandler.Detail(ctx, in, out)
}

func (h *houseHandler) DataByHouseIds(ctx context.Context, in *DataRequest, out *DataResponse) error {
	return h.HouseHandler.DataByHouseIds(ctx, in, out)
}
