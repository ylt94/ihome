// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package go_micro_service_order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Order service

func NewOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Order service

type OrderService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	UpdateStatus(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error)
	Comment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Order.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateStatus(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.name, "Order.UpdateStatus", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Comment(ctx context.Context, in *CommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Comment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	UpdateStatus(context.Context, *StatusRequest, *StatusResponse) error
	Comment(context.Context, *CommentRequest, *CommentResponse) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		UpdateStatus(ctx context.Context, in *StatusRequest, out *StatusResponse) error
		Comment(ctx context.Context, in *CommentRequest, out *CommentResponse) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.OrderHandler.Create(ctx, in, out)
}

func (h *orderHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.OrderHandler.List(ctx, in, out)
}

func (h *orderHandler) UpdateStatus(ctx context.Context, in *StatusRequest, out *StatusResponse) error {
	return h.OrderHandler.UpdateStatus(ctx, in, out)
}

func (h *orderHandler) Comment(ctx context.Context, in *CommentRequest, out *CommentResponse) error {
	return h.OrderHandler.Comment(ctx, in, out)
}
