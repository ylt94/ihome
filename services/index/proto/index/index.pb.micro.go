// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/index/index.proto

package go_micro_service_index

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Index service

func NewIndexEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Index service

type IndexService interface {
	Area(ctx context.Context, in *AreaRequest, opts ...client.CallOption) (*AreaResponse, error)
	Banner(ctx context.Context, in *BannerRequest, opts ...client.CallOption) (*BannerResponse, error)
}

type indexService struct {
	c    client.Client
	name string
}

func NewIndexService(name string, c client.Client) IndexService {
	return &indexService{
		c:    c,
		name: name,
	}
}

func (c *indexService) Area(ctx context.Context, in *AreaRequest, opts ...client.CallOption) (*AreaResponse, error) {
	req := c.c.NewRequest(c.name, "Index.Area", in)
	out := new(AreaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexService) Banner(ctx context.Context, in *BannerRequest, opts ...client.CallOption) (*BannerResponse, error) {
	req := c.c.NewRequest(c.name, "Index.Banner", in)
	out := new(BannerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Index service

type IndexHandler interface {
	Area(context.Context, *AreaRequest, *AreaResponse) error
	Banner(context.Context, *BannerRequest, *BannerResponse) error
}

func RegisterIndexHandler(s server.Server, hdlr IndexHandler, opts ...server.HandlerOption) error {
	type index interface {
		Area(ctx context.Context, in *AreaRequest, out *AreaResponse) error
		Banner(ctx context.Context, in *BannerRequest, out *BannerResponse) error
	}
	type Index struct {
		index
	}
	h := &indexHandler{hdlr}
	return s.Handle(s.NewHandler(&Index{h}, opts...))
}

type indexHandler struct {
	IndexHandler
}

func (h *indexHandler) Area(ctx context.Context, in *AreaRequest, out *AreaResponse) error {
	return h.IndexHandler.Area(ctx, in, out)
}

func (h *indexHandler) Banner(ctx context.Context, in *BannerRequest, out *BannerResponse) error {
	return h.IndexHandler.Banner(ctx, in, out)
}
